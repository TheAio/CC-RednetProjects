function encryptMessage(message, key)
  local encryptedMessage = {}
  for i = 1, #message do
    local charCode = string.byte(message, i)
    local encryptedCharCode = bit.bxor(charCode, key)
    encryptedMessage[i] = string.char(encryptedCharCode)
  end
  return table.concat(encryptedMessage)
end

function decryptMessage(encryptedMessage, key)
  local decryptedMessage = {}
  for i = 1, #encryptedMessage do
    local encryptedCharCode = string.byte(encryptedMessage, i)
    local decryptedCharCode = bit.bxor(encryptedCharCode, key)
    decryptedMessage[i] = string.char(decryptedCharCode)
  end
  return table.concat(decryptedMessage)
end

rednet.open("top")

print("Do you want to send or receive messages? (s/r)")
local choice = read()

if choice == "s" then
  while true do
    print("Enter the ID of the recipient computer:")
    local recipientID = tonumber(read())
    print("Enter the message to send:")
    local message = read()
    local encryptedMessage = encryptMessage(message, 42)
    rednet.send(recipientID, encryptedMessage, "secureMessage")
    print("Message sent.")
  end
elseif choice == "r" then
  print("Listening for messages...")
  while true do
    local senderID, message, protocol = rednet.receive()
    if protocol == "secureMessage" then
      local decryptedMessage = decryptMessage(message, 42)
      print("Received secure message: " .. decryptedMessage)
    end
  end
else
  print("Invalid choice.")
end
